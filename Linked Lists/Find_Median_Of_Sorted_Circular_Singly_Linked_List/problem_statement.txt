
Find Median Of Sorted Circular Singly Linked List


Problem Statement:

Given a pointer ptr to an arbitrary node of a sorted circular singly linked list L containing only even integers. You have to find the median value M of L.

When even number of elements in L, then the median M is average of two middle elements. 

Input Format:

There is only one argument, ptr denoting a pointer to an arbitrary node of L.

Output Format:

Return one integer denoting the median M.

Constraints:

1 <= Number of nodes in linked list <= 10^5
- 2 * 10^9 <= value contained in nodes <= 2 * 10^9 
Value contained in nodes will be even number. (Hence when even number of elements in L, median M will be an integer. (Even + Even) / 2 = Even)

Sample Test Case:

Sample Input:

L: 2 -> 4 -> 6 -> 8 -> 10

ptr: Pointer of the node containing value 4. 

Sample Output:

6

Explanation:

There are 5 nodes in L hence median M will be the value of 3rd node, which is 6. 

Notes:

Expected solution: Linear time complexity with constant extra space. 
Maximum time allowed in interview: 20 Minutes. 
Currently we have written code to handle input/output in C and C++ only, so in other languages you will need to implement from scratch. You can use given C and C++ implementations to implement in other languages. 
For implementation in other languages you will need the input format of the actual program. 

First line contains N, number of nodes in linked list.
Next N lines contains value of each node. 
Next line contains shift value in range [0, ptr_size). 
For example:
Our sample test case actual input can be described as:
5
2
4
6
8
10 (L: 2 -> 4 -> 6 -> 8 -> 10 -> NULL then you need to make it circular using tail->next = head. Now L will become circular.)
1  (Initially our pointer will be at the beginning of the linked list pointing at 2, but We need to give arbitrary node. So we do ptr = ptr->next 1 times hence not ptr will be pointing at 4 and we pass this to the function.)
